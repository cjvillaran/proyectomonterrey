# -*- coding: utf-8 -*-
"""Proyecto Monterrey

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vXt5ZQOzcDgVhl7F7Fif4tvlHUDO401g
"""

import pandas as pd

# Cargar el archivo CSV
movies_df = pd.read_csv('movies.csv')

# Verificar las primeras filas y la estructura del archivo
movies_df.head()

# Instalar dependencias necesarias
!pip install streamlit firebase-admin pandas

import firebase_admin
from firebase_admin import credentials, firestore

# Ruta al archivo de la clave de servicio de Firebase
path = "/content/"
cred = credentials.Certificate(path + "proyecto-monterrey.json")

# Verificar si Firebase ya ha sido inicializado
if not firebase_admin._apps:
    # Inicializar Firebase Admin SDK solo si no ha sido inicializado
    firebase_admin.initialize_app(cred)
else:
    print("Firebase ya ha sido inicializado.")

# Conectar con Firestore
db = firestore.client()

# Verificar que la conexión a Firestore está funcionando
print("Conexión exitosa a Firestore")

# Convertir el DataFrame a un diccionario de listas
movies_dict = movies_df.to_dict(orient='records')

# Subir los registros a Firestore
for movie in movies_dict:
    db.collection('movies').add(movie)

def fetch_movies():
    # Leer todos los documentos de la colección 'movies'
    movies_ref = db.collection('movies')
    docs = movies_ref.stream()

    # Crear una lista con los datos
    movies_data = []
    for doc in docs:
        movie = doc.to_dict()
        movies_data.append(movie)

    # Convertir la lista de diccionarios a un DataFrame
    return pd.DataFrame(movies_data)

# Cargar los datos de Firestore en un DataFrame
movies_df = fetch_movies()

import streamlit as st

# Mostrar título del dashboard
st.title('Movie Streaming Dashboard')

# Sidebar
sidebar = st.sidebar

# Checkbox para mostrar todos los filmes
if sidebar.checkbox('Mostrar todos los filmes'):
    st.header('Lista de Películas')
    st.write(movies_df)

# Buscar películas por título
search_title = sidebar.text_input('Buscar por título')
search_button = sidebar.button('Buscar')

if search_button:
    # Filtrar por título (sin importar minúsculas o mayúsculas)
    filtered_movies = movies_df[movies_df['title'].str.contains(search_title, case=False)]
    st.write(filtered_movies)

# Filtrar por director
directors = movies_df['director'].unique()
selected_director = sidebar.selectbox('Seleccionar director', directors)
filter_button = sidebar.button('Filtrar por director')

if filter_button:
    director_movies = movies_df[movies_df['director'] == selected_director]
    st.write(f'Total de filmes de {selected_director}: {len(director_movies)}')
    st.write(director_movies)

# Formulario para agregar una película
with sidebar.form(key='add_movie_form'):
    title = st.text_input('Título')
    director = st.text_input('Director')
    genre = st.text_input('Género')
    year = st.number_input('Año', min_value=1900, max_value=2024)
    submit_button = st.form_submit_button('Agregar película')

if submit_button:
    new_movie = {
        'title': title,
        'director': director,
        'genre': genre,
        'year': year
    }
    # Agregar película a Firestore
    db.collection('movies').add(new_movie)
    st.success(f'Película "{title}" agregada correctamente.')